{"version":3,"sources":["firebase.js","constants/index.js","helpers/index.js","context/project-context.js","hooks/index.js","context/selected-project-context.js","components/ProjectOverlay.js","components/TaskDate.js","components/AddTask.js","components/layout/Header.js","components/IndividualProject.js","components/Projects.js","components/AddProject.js","components/layout/Sidebar.js","components/Checkbox.js","components/Tasks.js","components/layout/Content.js","index.js","App.js"],"names":["firebaseConfig","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","collatedTasks","key","name","collatedTasksExist","selectedProject","find","task","generatePushId","PUSH_CHARS","lastRandChars","now","Date","getTime","timeStampChars","Array","i","charAt","Math","floor","id","join","ProjectsContext","createContext","ProjectsProvider","children","useState","projects","setProjects","useEffect","firestore","collection","where","orderBy","get","then","snapshot","allProjects","docs","map","project","data","docId","JSON","stringify","useProjects","Provider","value","useProjectsValue","useContext","SelectedProjectContext","SelectedProjectProvider","setSelectedProject","useSelectedProjectValue","ProjectOverlay","setProject","showProjectOverlay","setShowProjectOverlay","className","data-testid","onClick","onKeyDown","role","tabIndex","aria-label","TaskDate","setTaskDate","showTaskDate","setShowTaskDate","moment","format","add","AddTask","showAddTaskMain","shouldShowMain","showQuickAddTask","setShowQuickAddTask","setTask","taskDate","showMain","setShowMain","addTask","collatedDate","archived","date","userId","type","onChange","e","target","Header","darkMode","setDarkMode","setShouldShowMain","src","alt","IndividualProject","showConfirm","setShowConfirm","doc","delete","Projects","activeValue","active","setActive","data-doc-id","AddProject","shouldShow","show","setShow","projectName","setProjectName","placeholder","Sidebar","showProjects","setShowProjects","undefined","Checkbox","taskDesc","archiveTask","update","Tasks","tasks","setTasks","archivedTasks","setArchivedTasks","unsubscribe","onSnapshot","newTasks","filter","diff","useTasks","getCollatedTitle","length","getTitle","document","title","Content","render","darkModeDefault","getElementById"],"mappings":"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","file":"static/js/main.239b8463.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore';\n\n\nconst firebaseConfig = firebase.initializeApp({\n    apiKey: \"AIzaSyDwAOkgktEQ5_-VakiqWvhViOKOsk3NlXk\",\n    authDomain: \"todolist-tut-88478.firebaseapp.com\",\n    databaseURL: \"https://todolist-tut-88478.firebaseio.com\",\n    projectId: \"todolist-tut-88478\",\n    storageBucket: \"todolist-tut-88478.appspot.com\",\n    messagingSenderId: \"743486535016\",\n    appId: \"1:743486535016:web:d4e77ae8529812cf9fd2dd\"\n});\n\nexport { firebaseConfig as firebase }","export const collatedTasks = [\n    {key: 'INBOX', name:'Inbox'},\n    {key: 'TODAY', name:'Today'},\n    {key: 'NEXT_7', name:'Next 7 Days'},\n];","import { collatedTasks } from '../constants';\n\nexport const getTitle = (projects, projectId) =>\n  projects.find(project => project.projectId === projectId);\n\nexport const getCollatedTitle = (projects, key) =>\n  projects.find(project => project.key === key);\n\nexport const collatedTasksExist = selectedProject =>\n  collatedTasks.find(task => task.key === selectedProject);\n\nexport const generatePushId = (() => {\n  const PUSH_CHARS =\n    '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\n  const lastRandChars = [];\n\n  return function() {\n    let now = new Date().getTime();\n\n    const timeStampChars = new Array(8);\n    for (var i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      now = Math.floor(now / 64);\n    }\n\n    let id = timeStampChars.join('');\n\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n\n    return id;\n  };\n})();\n","import React, { createContext, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { useProjects } from '../hooks';\n\nexport const ProjectsContext = createContext();\nexport const ProjectsProvider = ({ children }) => {\n  const { projects, setProjects } = useProjects();\n\n  return (\n    <ProjectsContext.Provider value={{ projects, setProjects }}>\n      {children}\n    </ProjectsContext.Provider>\n  );\n};\n\nexport const useProjectsValue = () => useContext(ProjectsContext);\n\nProjectsProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","/* eslint-disable no-nested-ternary */\nimport { useState, useEffect } from 'react';\nimport moment from 'moment';\nimport { firebase } from '../firebase';\nimport { collatedTasksExist } from '../helpers';\n\nexport const useTasks = selectedProject => {\n  const [tasks, setTasks] = useState([]);\n  const [archivedTasks, setArchivedTasks] = useState([]);\n\n  useEffect(() => {\n    let unsubscribe = firebase\n      .firestore()\n      .collection('tasks')\n      .where('userId', '==', 'jlIFXIwyAL3tzHMtzRbw');\n\n    unsubscribe =\n      selectedProject && !collatedTasksExist(selectedProject)\n        ? (unsubscribe = unsubscribe.where('projectId', '==', selectedProject))\n        : selectedProject === 'TODAY'\n        ? (unsubscribe = unsubscribe.where(\n            'date',\n            '==',\n            moment().format('DD/MM/YYYY')\n          ))\n        : selectedProject === 'INBOX' || selectedProject === 0\n        ? (unsubscribe = unsubscribe.where('date', '==', ''))\n        : unsubscribe;\n\n    unsubscribe = unsubscribe.onSnapshot(snapshot => {\n      const newTasks = snapshot.docs.map(task => ({\n        id: task.id,\n        ...task.data(),\n      }));\n\n      setTasks(\n        selectedProject === 'NEXT_7'\n          ? newTasks.filter(\n              task =>\n                moment(task.date, 'DD-MM-YYYY').diff(moment(), 'days') <= 7 &&\n                task.archived !== true\n            )\n          : newTasks.filter(task => task.archived !== true)\n      );\n      setArchivedTasks(newTasks.filter(task => task.archived !== false));\n    });\n\n    return () => unsubscribe();\n  }, [selectedProject]);\n\n  return { tasks, archivedTasks };\n};\n\nexport const useProjects = () => {\n  const [projects, setProjects] = useState([]);\n\n  useEffect(() => {\n    firebase\n      .firestore()\n      .collection('projects')\n      .where('userId', '==', 'jlIFXIwyAL3tzHMtzRbw')\n      .orderBy('projectId')\n      .get()\n      .then(snapshot => {\n        const allProjects = snapshot.docs.map(project => ({\n          ...project.data(),\n          docId: project.id,\n        }));\n\n        if (JSON.stringify(allProjects) !== JSON.stringify(projects)) {\n          setProjects(allProjects);\n        }\n      });\n  }, [projects]);\n\n  return { projects, setProjects };\n};\n","import React, { createContext, useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const SelectedProjectContext = createContext();\nexport const SelectedProjectProvider = ({ children }) => {\n  const [selectedProject, setSelectedProject] = useState('INBOX');\n\n  return (\n    <SelectedProjectContext.Provider\n      value={{ selectedProject, setSelectedProject }}\n    >\n      {children}\n    </SelectedProjectContext.Provider>\n  );\n};\n\nexport const useSelectedProjectValue = () => useContext(SelectedProjectContext);\n\nSelectedProjectProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useProjectsValue } from '../context';\n\nexport const ProjectOverlay = ({\n  setProject,\n  showProjectOverlay,\n  setShowProjectOverlay,\n}) => {\n  const { projects } = useProjectsValue();\n\n  return (\n    projects &&\n    showProjectOverlay && (\n      <div className=\"project-overlay\" data-testid=\"project-overlay\">\n        <ul className=\"project-overlay__list\">\n          {projects.map(project => (\n            <li key={project.projectId}>\n              <div\n                data-testid=\"project-overlay-action\"\n                onClick={() => {\n                  setProject(project.projectId);\n                  setShowProjectOverlay(false);\n                }}\n                onKeyDown={() => {\n                  setProject(project.projectId);\n                  setShowProjectOverlay(false);\n                }}\n                role=\"button\"\n                tabIndex={0}\n                aria-label=\"Select the task project\"\n              >\n                {project.name}\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n    )\n  );\n};\n\nProjectOverlay.propTypes = {\n  projects: PropTypes.array,\n};\n","import React from 'react';\nimport moment from 'moment';\nimport { FaSpaceShuttle, FaSun, FaRegPaperPlane } from 'react-icons/fa';\nimport PropTypes from 'prop-types';\n\nexport const TaskDate = ({ setTaskDate, showTaskDate, setShowTaskDate }) =>\n  showTaskDate && (\n    <div className=\"task-date\" data-testid=\"task-date-overlay\">\n      <ul className=\"task-date__list\">\n        <li>\n          <div\n            onClick={() => {\n              setShowTaskDate(false);\n              setTaskDate(moment().format('DD/MM/YYYY'));\n            }}\n            onKeyDown={() => {\n              setShowTaskDate(false);\n              setTaskDate(moment().format('DD/MM/YYYY'));\n            }}\n            data-testid=\"task-date-today\"\n            tabIndex={0}\n            aria-label=\"Select today as the task date\"\n            role=\"button\"\n          >\n            <span>\n              <FaSpaceShuttle />\n            </span>\n            <span>Today</span>\n          </div>\n        </li>\n        <li>\n          <div\n            onClick={() => {\n              setShowTaskDate(false);\n              setTaskDate(\n                moment()\n                  .add(1, 'day')\n                  .format('DD/MM/YYYY')\n              );\n            }}\n            onKeyDown={() => {\n              setShowTaskDate(false);\n              setTaskDate(\n                moment()\n                  .add(1, 'day')\n                  .format('DD/MM/YYYY')\n              );\n            }}\n            data-testid=\"task-date-tomorrow\"\n            role=\"button\"\n            tabIndex={0}\n            aria-label=\"Select tomorrow as the task date\"\n          >\n            <span>\n              <FaSun />\n            </span>\n            <span>Tomorrow</span>\n          </div>\n        </li>\n        <li>\n          <div\n            onClick={() => {\n              setShowTaskDate(false);\n              setTaskDate(\n                moment()\n                  .add(7, 'days')\n                  .format('DD/MM/YYYY')\n              );\n            }}\n            onKeyDown={() => {\n              setShowTaskDate(false);\n              setTaskDate(\n                moment()\n                  .add(7, 'days')\n                  .format('DD/MM/YYYY')\n              );\n            }}\n            data-testid=\"task-date-next-week\"\n            aria-label=\"Select next week as the task date\"\n            tabIndex={0}\n            role=\"button\"\n          >\n            <span>\n              <FaRegPaperPlane />\n            </span>\n            <span>Next week</span>\n          </div>\n        </li>\n      </ul>\n    </div>\n  );\n\n  TaskDate.propTypes = {\n    setTaskDate: PropTypes.func.isRequired,\n    showTaskDate: PropTypes.bool.isRequired,\n    setShowTaskDate: PropTypes.func.isRequired,\n  };\n","import React, { useState } from 'react';\nimport { FaRegListAlt, FaRegCalendarAlt } from 'react-icons/fa';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport { firebase } from '../firebase';\nimport { useSelectedProjectValue } from '../context';\nimport { ProjectOverlay } from './ProjectOverlay';\nimport { TaskDate } from './TaskDate';\n\nexport const AddTask = ({\n  showAddTaskMain = true,\n  shouldShowMain = false,\n  showQuickAddTask,\n  setShowQuickAddTask,\n}) => {\n  const [task, setTask] = useState('');\n  const [taskDate, setTaskDate] = useState('');\n  const [project, setProject] = useState('');\n  const [showMain, setShowMain] = useState(shouldShowMain);\n  const [showProjectOverlay, setShowProjectOverlay] = useState(false);\n  const [showTaskDate, setShowTaskDate] = useState(false);\n\n  const { selectedProject } = useSelectedProjectValue();\n\n  const addTask = () => {\n    const projectId = project || selectedProject;\n    let collatedDate = '';\n\n    if (projectId === 'TODAY') {\n      collatedDate = moment().format('DD/MM/YYYY');\n    } else if (projectId === 'NEXT_7') {\n      collatedDate = moment()\n        .add(7, 'days')\n        .format('DD/MM/YYYY');\n    }\n\n    return (\n      task &&\n      projectId &&\n      firebase\n        .firestore()\n        .collection('tasks')\n        .add({\n          archived: false,\n          projectId,\n          task,\n          date: collatedDate || taskDate,\n          userId: 'jlIFXIwyAL3tzHMtzRbw',\n        })\n        .then(() => {\n          setTask('');\n          setProject('');\n          setShowMain('');\n          setShowProjectOverlay(false);\n        })\n    );\n  };\n\n  return (\n    <div\n      className={showQuickAddTask ? 'add-task add-task__overlay' : 'add-task'}\n      data-testid=\"add-task-comp\"\n    >\n      {showAddTaskMain && (\n        <div\n          className=\"add-task__shallow\"\n          data-testid=\"show-main-action\"\n          onClick={() => setShowMain(!showMain)}\n          onKeyDown={() => setShowMain(!showMain)}\n          tabIndex={0}\n          aria-label=\"Add task\"\n          role=\"button\"\n        >\n          <span className=\"add-task__plus\">+</span>\n          <span className=\"add-task__text\">Add Task</span>\n        </div>\n      )}\n\n      {(showMain || showQuickAddTask) && (\n        <div className=\"add-task__main\" data-testid=\"add-task-main\">\n          {showQuickAddTask && (\n            <>\n              <div data-testid=\"quick-add-task\">\n                <h2 className=\"header\">Quick Add Task</h2>\n                <span\n                  className=\"add-task__cancel-x\"\n                  data-testid=\"add-task-quick-cancel\"\n                  aria-label=\"Cancel adding task\"\n                  onClick={() => {\n                    setShowMain(false);\n                    setShowProjectOverlay(false);\n                    setShowQuickAddTask(false);\n                  }}\n                  onKeyDown={() => {\n                    setShowMain(false);\n                    setShowProjectOverlay(false);\n                    setShowQuickAddTask(false);\n                  }}\n                  tabIndex={0}\n                  role=\"button\"\n                >\n                  X\n                </span>\n              </div>\n            </>\n          )}\n          <ProjectOverlay\n            setProject={setProject}\n            showProjectOverlay={showProjectOverlay}\n            setShowProjectOverlay={setShowProjectOverlay}\n          />\n          <TaskDate\n            setTaskDate={setTaskDate}\n            showTaskDate={showTaskDate}\n            setShowTaskDate={setShowTaskDate}\n          />\n          <input\n            className=\"add-task__content\"\n            aria-label=\"Enter your task\"\n            data-testid=\"add-task-content\"\n            type=\"text\"\n            value={task}\n            onChange={e => setTask(e.target.value)}\n          />\n          <button\n            type=\"button\"\n            className=\"add-task__submit\"\n            data-testid=\"add-task\"\n            onClick={() =>\n              showQuickAddTask\n                ? addTask() && setShowQuickAddTask(false)\n                : addTask()\n            }\n          >\n            Add Task\n          </button>\n          {!showQuickAddTask && (\n            <span\n              className=\"add-task__cancel\"\n              data-testid=\"add-task-main-cancel\"\n              onClick={() => {\n                setShowMain(false);\n                setShowProjectOverlay(false);\n              }}\n              onKeyDown={() => {\n                setShowMain(false);\n                setShowProjectOverlay(false);\n              }}\n              aria-label=\"Cancel adding a task\"\n              tabIndex={0}\n              role=\"button\"\n            >\n              Cancel\n            </span>\n          )}\n          <span\n            className=\"add-task__project\"\n            data-testid=\"show-project-overlay\"\n            onClick={() => setShowProjectOverlay(!showProjectOverlay)}\n            onKeyDown={() => setShowProjectOverlay(!showProjectOverlay)}\n            tabIndex={0}\n            role=\"button\"\n          >\n            <FaRegListAlt />\n          </span>\n          <span\n            className=\"add-task__date\"\n            data-testid=\"show-task-date-overlay\"\n            onClick={() => setShowTaskDate(!showTaskDate)}\n            onKeyDown={() => setShowTaskDate(!showTaskDate)}\n            tabIndex={0}\n            role=\"button\"\n          >\n            <FaRegCalendarAlt />\n          </span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nAddTask.propTypes = {\n  showAddTaskMain: PropTypes.bool,\n  shouldShowMain: PropTypes.bool,\n  showQuickAddTask: PropTypes.bool,\n  setShowQuickAddTask: PropTypes.func,\n};\n","import React, { useState } from 'react';\nimport { FaPizzaSlice } from 'react-icons/fa';\nimport PropTypes from 'prop-types';\nimport { AddTask } from '../AddTask';\n\nexport const Header = ({ darkMode, setDarkMode }) => {\n  const [shouldShowMain, setShouldShowMain] = useState(false);\n  const [showQuickAddTask, setShowQuickAddTask] = useState(false);\n\n  return (\n    <header className=\"header\" data-testid=\"header\">\n      <nav>\n        <div className=\"logo\">\n          <img src=\"/images/logo.png\" alt=\"Todoist\" />\n        </div>\n        <div className=\"settings\">\n          <ul>\n            <li className=\"settings__add\">\n              <button\n                data-testid=\"quick-add-task-action\"\n                aria-label=\"Quick add task\"\n                type=\"button\"\n                onClick={() => {\n                  setShowQuickAddTask(true);\n                  setShouldShowMain(true);\n                }}\n                onKeyDown={() => {\n                  setShowQuickAddTask(true);\n                  setShouldShowMain(true);\n                }}\n              >\n                +\n              </button>\n            </li>\n            <li className=\"settings__darkmode\">\n              <button\n                data-testid=\"dark-mode-action\"\n                aria-label=\"Darkmode on/off\"\n                type=\"button\"\n                onClick={() => setDarkMode(!darkMode)}\n                onKeyDown={() => setDarkMode(!darkMode)}\n              >\n                <FaPizzaSlice />\n              </button>\n            </li>\n          </ul>\n        </div>\n      </nav>\n\n      <AddTask\n        showAddTaskMain={false}\n        shouldShowMain={shouldShowMain}\n        showQuickAddTask={showQuickAddTask}\n        setShowQuickAddTask={setShowQuickAddTask}\n      />\n    </header>\n  );\n};\n\nHeader.propTypes = {\n  darkMode: PropTypes.bool.isRequired,\n  setDarkMode: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport { FaTrashAlt } from 'react-icons/fa';\nimport PropTypes from 'prop-types';\nimport { useProjectsValue, useSelectedProjectValue } from '../context';\nimport { firebase } from '../firebase';\n\nexport const IndividualProject = ({ project }) => {\n  const [showConfirm, setShowConfirm] = useState(false);\n  const { projects, setProjects } = useProjectsValue();\n  const { setSelectedProject } = useSelectedProjectValue();\n\n  const deleteProject = docId => {\n    firebase\n      .firestore()\n      .collection('projects')\n      .doc(docId)\n      .delete()\n      .then(() => {\n        setProjects([...projects]);\n        setSelectedProject('INBOX');\n      });\n  };\n\n  return (\n    <>\n      <span className=\"sidebar__dot\">•</span>\n      <span className=\"sidebar__project-name\">{project.name}</span>\n      <span\n        className=\"sidebar__project-delete\"\n        data-testid=\"delete-project\"\n        onClick={() => setShowConfirm(!showConfirm)}\n        onKeyDown={() => setShowConfirm(!showConfirm)}\n        tabIndex={0}\n        role=\"button\"\n        aria-label=\"Confirm deletion of project\"\n      >\n        <FaTrashAlt />\n        {showConfirm && (\n          <div className=\"project-delete-modal\">\n            <div className=\"project-delete-modal__inner\">\n              <p>Are you sure you want to delete this project?</p>\n              <button\n                type=\"button\"\n                onClick={() => deleteProject(project.docId)}\n              >\n                Delete\n              </button>\n              <span\n                onClick={() => setShowConfirm(!showConfirm)}\n                onKeyDown={() => setShowConfirm(!showConfirm)}\n                tabIndex={0}\n                role=\"button\"\n                aria-label=\"Cancel adding project, do not delete\"\n              >\n                Cancel\n              </span>\n            </div>\n          </div>\n        )}\n      </span>\n    </>\n  );\n};\n\nIndividualProject.propTypes = {\n  project: PropTypes.object.isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelectedProjectValue, useProjectsValue } from '../context';\nimport { IndividualProject } from './IndividualProject';\n\nexport const Projects = ({ activeValue = null }) => {\n  const [active, setActive] = useState(activeValue);\n  const { setSelectedProject } = useSelectedProjectValue();\n  const { projects } = useProjectsValue();\n\n  return (\n    projects &&\n    projects.map(project => (\n      <li\n        key={project.projectId}\n        data-testid=\"project-action-parent\"\n        data-doc-id={project.docId}\n        className={\n          active === project.projectId\n            ? 'active sidebar__project'\n            : 'sidebar__project'\n        }\n      >\n        <div\n          role=\"button\"\n          data-testid=\"project-action\"\n          tabIndex={0}\n          aria-label={`Select ${project.name} as the task project`}\n          onClick={() => {\n            setActive(project.projectId);\n            setSelectedProject(project.projectId);\n          }}\n          onKeyDown={() => {\n            setActive(project.projectId);\n            setSelectedProject(project.projectId);\n          }}\n        >\n          <IndividualProject project={project} />\n        </div>\n      </li>\n    ))\n  );\n};\n\nProjects.propTypes = {\n  activeValue: PropTypes.bool,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { firebase } from '../firebase';\nimport { generatePushId } from '../helpers';\nimport { useProjectsValue } from '../context';\n\nexport const AddProject = ({ shouldShow = false }) => {\n  const [show, setShow] = useState(shouldShow);\n  const [projectName, setProjectName] = useState('');\n\n  const projectId = generatePushId();\n  const { projects, setProjects } = useProjectsValue();\n\n  const addProject = () =>\n    projectName &&\n    firebase\n      .firestore()\n      .collection('projects')\n      .add({\n        projectId,\n        name: projectName,\n        userId: 'jlIFXIwyAL3tzHMtzRbw',\n      })\n      .then(() => {\n        setProjects([...projects]);\n        setProjectName('');\n        setShow(false);\n      });\n\n  return (\n    <div className=\"add-project\" data-testid=\"add-project\">\n      {show && (\n        <div className=\"add-project__input\" data-testid=\"add-project-inner\">\n          <input\n            value={projectName}\n            onChange={e => setProjectName(e.target.value)}\n            className=\"add-project__name\"\n            data-testid=\"project-name\"\n            type=\"text\"\n            placeholder=\"Name your project\"\n          />\n          <button\n            className=\"add-project__submit\"\n            type=\"button\"\n            onClick={() => addProject()}\n            data-testid=\"add-project-submit\"\n          >\n            Add Project\n          </button>\n          <span\n            aria-label=\"Cancel adding project\"\n            data-testid=\"hide-project-overlay\"\n            className=\"add-project__cancel\"\n            onClick={() => setShow(false)}\n            onKeyDown={() => setShow(false)}\n            role=\"button\"\n            tabIndex={0}\n          >\n            Cancel\n          </span>\n        </div>\n      )}\n      <span className=\"add-project__plus\">+</span>\n      <span\n        aria-label=\"Add Project\"\n        data-testid=\"add-project-action\"\n        className=\"add-project__text\"\n        onClick={() => setShow(!show)}\n        onKeyDown={() => setShow(!show)}\n        role=\"button\"\n        tabIndex={0}\n      >\n        Add Project\n      </span>\n    </div>\n  );\n};\n\nAddProject.propTypes = {\n  shouldShow: PropTypes.bool,\n};\n","import React, { useState } from 'react';\nimport {\n  FaChevronDown,\n  FaInbox,\n  FaRegCalendarAlt,\n  FaRegCalendar,\n} from 'react-icons/fa';\nimport { Projects } from '../Projects';\nimport { useSelectedProjectValue } from '../../context';\nimport { AddProject } from '../AddProject';\n\nexport const Sidebar = () => {\n  const { setSelectedProject } = useSelectedProjectValue();\n  const [active, setActive] = useState('inbox');\n  const [showProjects, setShowProjects] = useState(true);\n\n  return (\n    <div className=\"sidebar\" data-testid=\"sidebar\">\n      <ul className=\"sidebar__generic\">\n        <li\n          data-testid=\"inbox\"\n          className={active === 'inbox' ? 'active' : undefined}\n        >\n          <div\n            data-testid=\"inbox-action\"\n            aria-label=\"Show inbox tasks\"\n            tabIndex={0}\n            role=\"button\"\n            onClick={() => {\n              setActive('inbox');\n              setSelectedProject('INBOX');\n            }}\n            onKeyDown={() => {\n              setActive('inbox');\n              setSelectedProject('INBOX');\n            }}\n          >\n            <span>\n              <FaInbox />\n            </span>\n            <span>Inbox</span>\n          </div>\n        </li>\n        <li\n          data-testid=\"today\"\n          className={active === 'today' ? 'active' : undefined}\n        >\n          <div\n            data-testid=\"today-action\"\n            aria-label=\"Show today's tasks\"\n            tabIndex={0}\n            role=\"button\"\n            onClick={() => {\n              setActive('today');\n              setSelectedProject('TODAY');\n            }}\n            onKeyDown={() => {\n              setActive('today');\n              setSelectedProject('TODAY');\n            }}\n          >\n            <span>\n              <FaRegCalendar />\n            </span>\n            <span>Today</span>\n          </div>\n        </li>\n        <li\n          data-testid=\"next_7\"\n          className={active === 'next_7' ? 'active' : undefined}\n        >\n          <div\n            data-testid=\"next_7-action\"\n            aria-label=\"Show tasks for the next 7 days\"\n            tabIndex={0}\n            role=\"button\"\n            onClick={() => {\n              setActive('next_7');\n              setSelectedProject('NEXT_7');\n            }}\n            onKeyDown={() => {\n              setActive('next_7');\n              setSelectedProject('NEXT_7');\n            }}\n          >\n            <span>\n              <FaRegCalendarAlt />\n            </span>\n            <span>Next 7 days</span>\n          </div>\n        </li>\n      </ul>\n      <div\n        className=\"sidebar__middle\"\n        aria-label=\"Show/hide projects\"\n        onClick={() => setShowProjects(!showProjects)}\n        onKeyDown={() => setShowProjects(!showProjects)}\n        role=\"button\"\n        tabIndex={0}\n      >\n        <span>\n          <FaChevronDown\n            className={!showProjects ? 'hidden-projects' : undefined}\n          />\n        </span>\n        <h2>Projects</h2>\n      </div>\n\n      <ul className=\"sidebar__projects\">{showProjects && <Projects />}</ul>\n\n      {showProjects && <AddProject />}\n    </div>\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { firebase } from '../firebase';\n\nexport const Checkbox = ({ id, taskDesc }) => {\n  const archiveTask = () => {\n    firebase\n      .firestore()\n      .collection('tasks')\n      .doc(id)\n      .update({\n        archived: true,\n      });\n  };\n\n  return (\n    <div\n      className=\"checkbox-holder\"\n      data-testid=\"checkbox-action\"\n      onClick={() => archiveTask()}\n      onKeyDown={() => archiveTask()}\n      aria-label={`Mark ${taskDesc} as done?`}\n      role=\"button\"\n      tabIndex={0}\n    >\n      <span className=\"checkbox\" />\n    </div>\n  );\n};\n\nCheckbox.propTypes = {\n  id: PropTypes.string.isRequired,\n  taskDesc: PropTypes.string.isRequired,\n};\n","import React, { useEffect } from 'react';\nimport { Checkbox } from './Checkbox';\nimport { AddTask } from './AddTask';\nimport { useTasks } from '../hooks';\nimport { collatedTasks } from '../constants';\nimport { getTitle, getCollatedTitle, collatedTasksExist } from '../helpers';\nimport { useSelectedProjectValue, useProjectsValue } from '../context';\n\nexport const Tasks = () => {\n  const { selectedProject } = useSelectedProjectValue();\n  const { projects } = useProjectsValue();\n  const { tasks } = useTasks(selectedProject);\n\n  let projectName = '';\n\n  if (collatedTasksExist(selectedProject) && selectedProject) {\n    projectName = getCollatedTitle(collatedTasks, selectedProject).name;\n  }\n\n  if (\n    projects &&\n    projects.length > 0 &&\n    selectedProject &&\n    !collatedTasksExist(selectedProject)\n  ) {\n    projectName = getTitle(projects, selectedProject).name;\n  }\n\n  useEffect(() => {\n    document.title = `${projectName}: Todoist`;\n  });\n\n  return (\n    <div className=\"tasks\" data-testid=\"tasks\">\n      <h2 data-testid=\"project-name\">{projectName}</h2>\n\n      <ul className=\"tasks__list\">\n        {tasks.map(task => (\n          <li key={`${task.id}`}>\n            <Checkbox id={task.id} taskDesc={task.task} />\n            <span>{task.task}</span>\n          </li>\n        ))}\n      </ul>\n\n      <AddTask />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Sidebar } from './Sidebar';\nimport { Tasks } from '../Tasks';\n\nexport const Content = () => (\n  <section className=\"content\">\n    <Sidebar />\n    <Tasks />\n  </section>\n);\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { App } from './App';\nimport './App.scss';\n\nrender(<App />, document.getElementById('root'));\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Header } from './components/layout/Header';\nimport { Content } from './components/layout/Content';\nimport { ProjectsProvider, SelectedProjectProvider } from './context';\n\nexport const App = ({ darkModeDefault = false }) => {\n  const [darkMode, setDarkMode] = useState(darkModeDefault);\n\n  return (\n    <SelectedProjectProvider>\n      <ProjectsProvider>\n        <main\n          data-testid=\"application\"\n          className={darkMode ? 'darkmode' : undefined}\n        >\n          <Header darkMode={darkMode} setDarkMode={setDarkMode} />\n          <Content />\n        </main>\n      </ProjectsProvider>\n    </SelectedProjectProvider>\n  );\n};\n\nApp.propTypes = {\n  darkModeDefault: PropTypes.bool,\n};\n"],"sourceRoot":""}